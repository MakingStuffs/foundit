{"version":3,"sources":["components/FormFooter.js","components/Notification.js","components/FoundItHeader.js","components/Loader .js","components/ReCaptcha.js","components/QuestionInput.js","components/QuestionSwitch.js","components/QuestionsList.js","components/Form.js","components/Container.js","components/HomeContent.js","components/HomeContentFooter.js","components/MainFooter.js","App.js","index.js"],"names":["FormFooter","backHandler","nextHandler","currentQuestion","totalQuestions","className","type","onClick","Notification","closeHandler","errorMessage","successMessage","getMessageParagraphs","msg","split","map","p","src","width","height","alt","style","borderRadius","ariaLabel","FoundItHeader","Loader","loading","ReCaptcha","data-sitekey","data-size","QuestionInput","changeHandler","label","description","inputMode","value","name","required","onChange","QuestionSwitch","checked","QuestionList","current","formData","setTotal","questions","deviceName","hasCase","caseColour","caseMaterial","caseHasAccessories","caseAccessories","email","phone","fontWeight","length","Form","toggleVisibility","useState","setCurrent","setTotalQuestions","setLoading","notification","setNotification","setErrorMessage","token","setFormData","useEffect","script","document","createElement","body","appendChild","onSubmit","event","preventDefault","window","grecaptcha","ready","execute","action","then","a","fetch","method","headers","JSON","stringify","response","json","data","setTimeout","status","message","target","currentField","Object","keys","emailRegex","test","validateField","Container","children","HomeContent","fontStyle","HomeContentFooter","buttonCallback","MainFooter","maxWidth","textAlign","color","margin","fontSize","App","showForm","setShowForm","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bd9d16a0.chunk.js","sourcesContent":["import React from 'react'\n\nconst FormFooter = ({\n  backHandler,\n  nextHandler,\n  currentQuestion,\n  totalQuestions,\n}) => {\n  return (\n    <div className=\"footer\">\n      {currentQuestion !== 0 && (\n        <button type=\"button\" onClick={backHandler}>\n          Prev\n        </button>\n      )}\n      {currentQuestion !== totalQuestions && (\n        <button type=\"button\" onClick={nextHandler}>\n          Next\n        </button>\n      )}\n      {currentQuestion === totalQuestions && (\n        <button type=\"submit\">Submit</button>\n      )}\n    </div>\n  )\n}\n\nexport default FormFooter\n","import React from 'react'\n\nconst Notification = ({ closeHandler, errorMessage, successMessage }) => {\n  const hasMessage = errorMessage || successMessage\n  const getMessageParagraphs = (msg) => msg.split('.').map((p) => <p>{p}</p>)\n  return (\n    hasMessage && (\n      <>\n        <div className=\"overlay\"></div>\n        <div className={errorMessage ? 'error-box' : 'notification-box'}>\n          <div className=\"header\">\n            <img\n              src=\"/foundit-logo.png\"\n              width=\"50px\"\n              height=\"50px\"\n              alt=\"Found It logo\"\n              style={{ borderRadius: '50%' }}\n            />\n            <p>{errorMessage ? 'error' : 'success'}</p>\n          </div>\n          <div className=\"content\">\n            <p>\n              {errorMessage\n                ? getMessageParagraphs(errorMessage)\n                : getMessageParagraphs(successMessage)}\n            </p>\n          </div>\n          <div className=\"footer\">\n            <button ariaLabel=\"Close\" type=\"button\" onClick={closeHandler}>\n              Close\n            </button>\n          </div>\n        </div>\n      </>\n    )\n  )\n}\n\nexport default Notification\n","import React from 'react'\n\nconst FoundItHeader = () => {\n  return (\n    <div className=\"header\">\n      <img\n        src=\"/foundit-logo.png\"\n        width=\"50px\"\n        height=\"50px\"\n        alt=\"Found It logo\"\n        style={{ borderRadius: '50%' }}\n      />\n      <h1>Found It</h1>\n    </div>\n  )\n}\n\nexport default FoundItHeader\n","import React from 'react'\n\nconst Loader = ({ loading }) =>\n  loading !== false && (\n    <>\n      <span className=\"loader\"></span>\n    </>\n  )\n\nexport default Loader\n","import React from 'react'\n\nconst ReCaptcha = () => (\n  <div\n    className=\"g-recaptcha\"\n    data-sitekey=\"6LdTzCUaAAAAABJFQhrEhUVV3CAr2s1DvrH9M3gg\"\n    data-size=\"invisible\"\n  ></div>\n)\n\nexport default ReCaptcha\n","import React from 'react'\n\nconst QuestionInput = ({\n  changeHandler,\n  label,\n  description,\n  inputMode = 'text',\n  type = 'text',\n  value,\n  name,\n  required = true,\n}) => (\n  <div className=\"form-input\">\n    <label>{label}</label>\n    <span className=\"description\">{description}</span>\n    <input\n      name={name}\n      value={value}\n      type={type}\n      inputMode={inputMode}\n      required={required}\n      onChange={changeHandler}\n    />\n  </div>\n)\nexport default QuestionInput\n","import React from 'react'\n\nconst QuestionSwitch = ({ label, description, value, changeHandler, name }) => {\n  return (\n    <div className=\"form-switch\">\n      <p>{label}</p>\n      <span className=\"description\">{description}</span>\n      <label className=\"switch\">\n        <input\n          name={name}\n          checked={value}\n          type=\"checkbox\"\n          onChange={changeHandler}\n        />\n        <span className=\"slider\"></span>\n        <span className=\"status\">{value ? 'Yes' : 'No'}</span>\n      </label>\n    </div>\n  )\n}\n\nexport default QuestionSwitch\n","import React from 'react'\nimport QuestionInput from './QuestionInput'\nimport QuestionSwitch from './QuestionSwitch'\n\nconst QuestionList = ({ current, formData, changeHandler, setTotal }) => {\n  const questions = [\n    <QuestionInput\n      name=\"deviceName\"\n      changeHandler={changeHandler}\n      value={formData.deviceName}\n      label=\"What is the device name?\"\n      description=\"The device name is the name which appears when you pair it. For example:\n          Paul's AirPods\"\n    />,\n    <QuestionSwitch\n      value={formData.hasCase}\n      changeHandler={changeHandler}\n      name=\"hasCase\"\n      label=\"Are they in a case?\"\n      description=\"This does not mean the charging box which comes with the headphones.\"\n    />,\n    <QuestionInput\n      label=\"What colour is the case?\"\n      description=\"Again, this is not referring to the charging box which comes with the\n          headphones.\"\n      name=\"caseColour\"\n      value={formData.caseColour}\n      changeHandler={changeHandler}\n      required={false}\n    />,\n    <QuestionInput\n      label=\"What material is the case?\"\n      description=\"A one word answer such as 'plastic', 'rubber' or 'wood' will do.\"\n      name=\"caseMaterial\"\n      value={formData.caseMaterial}\n      changeHandler={changeHandler}\n      required={false}\n    />,\n    <QuestionSwitch\n      label=\"Does the Case Have Accessories?\"\n      description=\"An accessory could be something like a light, clip or a sticker.\"\n      value={formData.caseHasAccessories}\n      changeHandler={changeHandler}\n      name=\"caseHasAccessories\"\n    />,\n    <QuestionInput\n      label=\"What is it?\"\n      description=\"Describe the accessory attached to the case. One word will do, for example: sticker, light, clip etc.\"\n      name=\"caseAccessories\"\n      value={formData.caseAccessories}\n      changeHandler={changeHandler}\n      required={false}\n    />,\n    <QuestionInput\n      label=\"What is your name?\"\n      description=\"If you would prefer not to say just say 'prefer not to say'\"\n      name=\"name\"\n      value={formData.name}\n      changeHandler={changeHandler}\n    />,\n    <QuestionInput\n      label=\"What is your email address?\"\n      description=\"This will only be used to contact you if you correctly identify the\n          AirPods. No information is stored within a database.\"\n      name=\"email\"\n      type=\"email\"\n      inputMode=\"email\"\n      value={formData.email}\n      changeHandler={changeHandler}\n    />,\n    <QuestionInput\n      label=\"What is your phone number?\"\n      description=\"Again, this will only be used to contact you in the case you correctly\n          identify the headphones and is not stored in a database.\"\n      name=\"phone\"\n      type=\"tel\"\n      inputMode=\"tel\"\n      value={formData.phone}\n      changeHandler={changeHandler}\n    />,\n    <div className=\"confirmation-container\">\n      <h2>Your Answers</h2>\n      <p className=\"description\">\n        Please confirm you submitted the correct information or go back and\n        alter your input.\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Name: </span>\n        {formData.name}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Phone: </span>\n        {formData.phone}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Email: </span>\n        {formData.email}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Device Name: </span>\n        {formData.deviceName}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Description: </span>\n        {formData.hasCase\n          ? `Has a ${formData.caseColour} case which is made of ${\n              formData.caseMaterial\n            }${\n              formData.caseHasAccessories\n                ? ` and has a ${formData.caseAccessories}`\n                : '.'\n            }`\n          : 'No case or accessories.'}\n      </p>\n    </div>,\n  ]\n\n  setTotal(questions.length - 1)\n\n  return <div className=\"content\">{questions[current]}</div>\n}\n\nexport default QuestionList\n","import React, { useEffect, useState } from 'react'\nimport FormFooter from './FormFooter'\nimport Notification from './Notification'\nimport FoundItHeader from './FoundItHeader'\nimport Loader from './Loader '\nimport ReCaptcha from './ReCaptcha'\nimport QuestionList from './QuestionsList'\n\nconst Form = ({ toggleVisibility }) => {\n  const [current, setCurrent] = useState(0)\n  const [totalQuestions, setTotalQuestions] = useState(0)\n  const [loading, setLoading] = useState(false)\n  const [notification, setNotification] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  const [formData, setFormData] = useState({\n    deviceName: '',\n    hasCase: false,\n    caseColour: '',\n    caseMaterial: '',\n    caseHasAccessories: false,\n    caseAccessories: '',\n    name: '',\n    email: '',\n    phone: '',\n    token: '',\n  })\n\n  const changeHandler = (event) => {\n    const target = event.target\n    const name = target.name\n    const value = target.type === 'checkbox' ? target.checked : target.value\n    setFormData({ ...formData, [name]: value })\n  }\n\n  const sendForm = () => {\n    window.grecaptcha.ready(() =>\n      window.grecaptcha\n        .execute('6LdTzCUaAAAAABJFQhrEhUVV3CAr2s1DvrH9M3gg', {\n          action: 'submit',\n        })\n        .then(async (token) => {\n          formData.token = token\n          const response = await fetch('/api/submit/claim', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n          const data = await response.json()\n          return setTimeout(() => {\n            setLoading(false)\n            return data.status === 200\n              ? setNotification(data.message)\n              : setErrorMessage(data.message)\n          }, 3000)\n        })\n    )\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n\n    if (current !== totalQuestions) {\n      return setCurrent(current + 1)\n    }\n    setLoading(true)\n    return sendForm()\n  }\n\n  const validateField = (value, type = null) => {\n    const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    if (value === '') {\n      setErrorMessage(`This field cannot be empty`)\n      return false\n    }\n    if (value.length < 3) {\n      setErrorMessage(`This field must be at least three characters`)\n      return false\n    }\n    if (type === 'email') {\n      const valid = emailRegex.test(value)\n      if (!valid) {\n        setErrorMessage(`${value} does not appear to be a valid email address`)\n        return false\n      }\n    }\n    if (type === 'phone') {\n      if (value.length < 11) {\n        setErrorMessage(\n          `You did not enter a valid phone number. It should be at least 11 digits. You entered ${value}`\n        )\n        return false\n      }\n    }\n    return true\n  }\n\n  const nextButtonHandler = () => {\n    const currentField = Object.keys(formData)[current]\n    const currentFieldValue = formData[currentField]\n    const fieldValidated = validateField(currentFieldValue, currentField)\n    if (!fieldValidated) return\n\n    if (!formData.hasCase && current === 1) {\n      return setCurrent(current + 5)\n    }\n\n    if (!formData.caseHasAccessories && current === 4) {\n      return setCurrent(current + 2)\n    }\n\n    setCurrent(current + 1)\n  }\n\n  const backButtonHandler = () => {\n    if (!formData.hasCase && (current === 4 || current === 6)) {\n      return setCurrent(0)\n    }\n    if (formData.hasCase && !formData.caseHasAccessories && current === 6) {\n      return setCurrent(current - 2)\n    }\n    setCurrent(current - 1)\n  }\n\n  const notificationCallback = () => {\n    if (errorMessage !== '') {\n      setErrorMessage('')\n    } else {\n      setNotification('')\n      toggleVisibility(false)\n    }\n  }\n\n  useEffect(() => {\n    const script = document.createElement('script')\n    script.src =\n      'https://www.google.com/recaptcha/api.js?render=6LdTzCUaAAAAABJFQhrEhUVV3CAr2s1DvrH9M3gg'\n    document.body.appendChild(script)\n  }, [])\n\n  return (\n    <>\n      <Notification\n        errorMessage={errorMessage}\n        successMessage={notification}\n        closeHandler={notificationCallback}\n      />\n      <ReCaptcha />\n      <form className=\"container\" onSubmit={submitHandler}>\n        <FoundItHeader />\n        <Loader loading={loading} />\n        <button\n          className=\"close-button\"\n          type=\"button\"\n          onClick={() => toggleVisibility(false)}\n        ></button>\n        <QuestionList\n          current={current}\n          formData={formData}\n          changeHandler={changeHandler}\n          setTotal={setTotalQuestions}\n        />\n        <FormFooter\n          backHandler={backButtonHandler}\n          nextHandler={nextButtonHandler}\n          currentQuestion={current}\n          totalQuestions={totalQuestions}\n        />\n      </form>\n    </>\n  )\n}\nexport default Form\n","import React from 'react'\n\nconst Container = ({ children }) => {\n  return <div className=\"container\">{children}</div>\n}\n\nexport default Container\n","import React from 'react'\n\nconst HomeContent = () => (\n  <div className=\"content\">\n    <p>\n      On the morning of 7th January 2021 I was walking my dog near the London\n      Academy in Edgware, London, and I found a pair of Apple Air Pod\n      headphones.\n    </p>\n    <p>\n      In an attempt to locate the original owner of said headphones I made this\n      website.\n    </p>\n    <p>\n      If you believe the mentioned headphones to be yours please fill in the\n      form and I will contact you.\n    </p>\n    <p style={{ fontWeight: 'bolder', fontStyle: 'italic' }}>\n      Please note that I will only contact you if you correctly identify the\n      Apple AirPods which I found.\n    </p>\n  </div>\n)\n\nexport default HomeContent\n","import React from 'react'\n\nconst HomeContentFooter = ({ buttonCallback }) => (\n  <div className=\"footer\">\n    <button onClick={buttonCallback}>Begin</button>\n  </div>\n)\n\nexport default HomeContentFooter\n","import React from 'react'\n\nconst MainFooter = () => (\n  <footer\n    style={{\n      maxWidth: 500,\n      width: '90%',\n      textAlign: 'center',\n      color: 'white',\n      margin: '2rem auto',\n      fontSize: '1.2rem',\n    }}\n  >\n    Your information is not stored on any database or shared with any third\n    parties other than Google's reCaptcha bot prevention.\n  </footer>\n)\n\nexport default MainFooter\n","import React, { useState } from 'react'\nimport Form from './components/Form'\nimport FoundItHeader from './components/FoundItHeader'\nimport Container from './components/Container'\nimport HomeContent from './components/HomeContent'\nimport HomeContentFooter from './components/HomeContentFooter'\nimport MainFooter from './components/MainFooter'\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false)\n\n  return (\n    <div className=\"App\">\n      {!showForm ? (\n        <Container>\n          <FoundItHeader />\n          <HomeContent />\n          <HomeContentFooter buttonCallback={() => setShowForm(true)} />\n        </Container>\n      ) : (\n        <Form title=\"Claim AirPods\" toggleVisibility={setShowForm} />\n      )}\n      <MainFooter />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './sass/styles.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}