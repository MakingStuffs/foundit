{"version":3,"sources":["components/Form.js","components/Container.js","App.js","index.js"],"names":["Form","toggleVisibility","useState","current","setCurrent","loading","setLoading","notification","setNotification","errorMessage","setErrorMessage","deviceName","hasCase","caseColour","caseMaterial","caseHasAccessories","caseAccessories","name","email","phone","token","formData","setFormData","changeHandler","event","target","value","type","checked","useEffect","script","document","createElement","src","body","appendChild","questions","className","onChange","required","style","fontWeight","onClick","data-sitekey","data-size","onSubmit","preventDefault","length","setTimeout","window","grecaptcha","ready","execute","action","then","a","fetch","method","headers","JSON","stringify","response","json","data","status","message","currentField","Object","keys","emailRegex","test","validateField","Container","children","App","showForm","setShowForm","title","fontStyle","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f8dcc43c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst Form = ({ toggleVisibility }) => {\n  const [current, setCurrent] = useState(0)\n  const [loading, setLoading] = useState(false)\n  const [notification, setNotification] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  const [formData, setFormData] = useState({\n    deviceName: '',\n    hasCase: false,\n    caseColour: '',\n    caseMaterial: '',\n    caseHasAccessories: false,\n    caseAccessories: '',\n    name: '',\n    email: '',\n    phone: '',\n    token: '',\n  })\n\n  const changeHandler = (event) => {\n    const target = event.target\n    const name = target.name\n    const value = target.type === 'checkbox' ? target.checked : target.value\n\n    setFormData({ ...formData, [name]: value })\n  }\n\n  const sendForm = () => {\n    window.grecaptcha.ready(() =>\n      window.grecaptcha\n        .execute('6LdTzCUaAAAAABJFQhrEhUVV3CAr2s1DvrH9M3gg', {\n          action: 'submit',\n        })\n        .then(async (token) => {\n          formData.token = token\n          const response = await fetch('/api/submit/claim', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(formData),\n          })\n          const data = await response.json()\n          return setTimeout(() => {\n            setLoading(false)\n            return data.status === 200\n              ? setNotification(data.message)\n              : setErrorMessage(data.message)\n          }, 3000)\n        })\n    )\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault()\n    setLoading(true)\n    if (current !== questions.length - 1) {\n      return setTimeout(() => {\n        setLoading(false)\n        setCurrent(current + 1)\n      }, 3000)\n    }\n    return sendForm()\n  }\n\n  const validateField = (value, type = null) => {\n    const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    if (value === '') {\n      setErrorMessage(`This field cannot be empty`)\n      return false\n    }\n    if (value.length < 3) {\n      setErrorMessage(`This field must be at least three characters`)\n      return false\n    }\n    if (type === 'email') {\n      const valid = emailRegex.test(value)\n      if (!valid) {\n        setErrorMessage(`${value} does not appear to be a valid email address`)\n        return false\n      }\n    }\n    if (type === 'phone') {\n      if (value.length < 11) {\n        setErrorMessage(\n          `You did not enter a valid phone number. It should be at least 11 digits. You entered ${value}`\n        )\n        return false\n      }\n    }\n    return true\n  }\n\n  const nextButtonHandler = () => {\n    const currentField = Object.keys(formData)[current]\n    const currentFieldValue = formData[currentField]\n    const fieldValidated = validateField(currentFieldValue, currentField)\n    if (!fieldValidated) return\n\n    if (!formData.hasCase && current === 1) {\n      return setCurrent(current + 5)\n    }\n\n    if (!formData.caseHasAccessories && current === 4) {\n      return setCurrent(current + 2)\n    }\n\n    setCurrent(current + 1)\n  }\n\n  const backButtonHandler = () => {\n    if (!formData.hasCase && (current === 4 || current === 6)) {\n      return setCurrent(0)\n    }\n    if (formData.hasCase && !formData.caseHasAccessories && current === 6) {\n      return setCurrent(current - 2)\n    }\n    setCurrent(current - 1)\n  }\n\n  useEffect(() => {\n    const script = document.createElement('script')\n    script.src =\n      'https://www.google.com/recaptcha/api.js?render=6LdTzCUaAAAAABJFQhrEhUVV3CAr2s1DvrH9M3gg'\n    document.body.appendChild(script)\n  }, [])\n\n  const questions = [\n    <div className=\"form-input\">\n      <label>What is the Device Name?</label>\n      <input\n        name=\"deviceName\"\n        value={formData.deviceName}\n        type=\"text\"\n        onChange={changeHandler}\n        required={true}\n      />\n    </div>,\n    <div className=\"form-switch\">\n      <p>Does it Have a Case?</p>\n      <label className=\"switch\">\n        <input\n          name=\"hasCase\"\n          checked={formData.hasCase}\n          type=\"checkbox\"\n          onChange={changeHandler}\n        />\n        <span className=\"slider\"></span>\n        <span className=\"status\">{formData.hasCase ? 'Yes' : 'No'}</span>\n      </label>\n    </div>,\n    <div className=\"form-input\">\n      <label>What Colour is the Case?</label>\n      <input\n        name=\"caseColour\"\n        value={formData.caseColour}\n        type=\"text\"\n        onChange={changeHandler}\n      />\n    </div>,\n    <div className=\"form-input\">\n      <label>What Material is the Case?</label>\n      <input\n        name=\"caseMaterial\"\n        value={formData.caseMaterial}\n        type=\"test\"\n        onChange={changeHandler}\n      />\n    </div>,\n    <div className=\"form-switch\">\n      <p>Does the Case Have a Defining Feature?</p>\n      <label className=\"switch\">\n        <input\n          name=\"caseHasAccessories\"\n          checked={formData.caseHasAccessories}\n          type=\"checkbox\"\n          onChange={changeHandler}\n        />\n        <span className=\"slider\"></span>\n        <span className=\"status\">\n          {formData.caseHasAccessories ? 'Yes' : 'No'}\n        </span>\n      </label>\n    </div>,\n    <div className=\"form-input\">\n      <label>What is it?</label>\n      <input\n        name=\"caseAccessories\"\n        value={formData.caseAccessories}\n        type=\"text\"\n        onChange={changeHandler}\n      />\n    </div>,\n    <div className=\"form-input\">\n      <label>What is Your Name?</label>\n      <input\n        name=\"name\"\n        value={formData.name}\n        type=\"text\"\n        onChange={changeHandler}\n      />\n    </div>,\n    <div className=\"form-input\">\n      <label>What is Your Email Address?</label>\n      <input\n        name=\"email\"\n        value={formData.email}\n        type=\"text\"\n        onChange={changeHandler}\n      />\n    </div>,\n    <div className=\"form-input\">\n      <label>What is Your Phone Number?</label>\n      <input\n        name=\"phone\"\n        value={formData.phone}\n        type=\"number\"\n        onChange={changeHandler}\n      />\n    </div>,\n    <div className=\"confirmation-container\">\n      <h2>Your Answers</h2>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Name: </span>\n        {formData.name}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Phone: </span>\n        {formData.phone}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Email: </span>\n        {formData.email}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Device Name: </span>\n        {formData.deviceName}\n      </p>\n      <p>\n        <span style={{ fontWeight: 'bold' }}>Description: </span>\n        {formData.hasCase\n          ? `Has a ${formData.caseColour} case which is made of ${\n              formData.caseMaterial\n            }${\n              formData.caseHasAccessories\n                ? ` and has a ${formData.caseAccessories}`\n                : '.'\n            }`\n          : 'No case or accessories.'}\n      </p>\n    </div>,\n  ]\n\n  return (\n    <>\n      {notification !== '' && (\n        <>\n          <div className=\"overlay\"></div>\n          <div className=\"notification-box\">\n            <h3>Success</h3>\n            <p>{notification}</p>\n            <button\n              onClick={() => {\n                setNotification('')\n                toggleVisibility(false)\n              }}\n            >\n              Close\n            </button>\n          </div>\n        </>\n      )}\n      {errorMessage !== '' && (\n        <>\n          <div className=\"overlay\"></div>\n          <div className=\"error-box\">\n            <h3>Error</h3>\n            <p>{errorMessage}</p>\n            <button onClick={() => setErrorMessage('')}>Close</button>\n          </div>\n        </>\n      )}\n      <div\n        className=\"g-recaptcha\"\n        data-sitekey=\"6LdTzCUaAAAAABJFQhrEhUVV3CAr2s1DvrH9M3gg\"\n        data-size=\"invisible\"\n      ></div>\n      <form className=\"container\" onSubmit={submitHandler}>\n        {loading !== false && (\n          <>\n            <span className=\"loader\"></span>\n          </>\n        )}\n        <button\n          className=\"close-button\"\n          onClick={() => toggleVisibility(false)}\n        ></button>\n        {questions[current]}\n        {current !== 0 && (\n          <button type=\"button\" onClick={backButtonHandler}>\n            Prev\n          </button>\n        )}\n        {current !== questions.length - 1 && (\n          <button type=\"button\" onClick={nextButtonHandler}>\n            Next\n          </button>\n        )}\n        {current === questions.length - 1 && (\n          <button type=\"submit\">Submit</button>\n        )}\n      </form>\n    </>\n  )\n}\nexport default Form\n","import React from 'react'\n\nconst Container = ({ children }) => {\n  return <div className=\"container\">{children}</div>\n}\n\nexport default Container\n","import React, { useState } from 'react'\nimport Form from './components/Form'\nimport Container from './components/Container'\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false)\n\n  return (\n    <div className=\"App\">\n      {!showForm ? (\n        <Container>\n          <h1>Found It</h1>\n          <p>\n            On the morning of 7th January 2021 I was walking my dog near the\n            London Academy in Edgware, London, and I found a pair of Apple Air\n            Pod headphones.\n          </p>\n          <p>\n            In an attempt to locate the original owner of said headphones I made\n            this website.\n          </p>\n          <p>\n            If you believe the mentioned headphones to be yours please fill in\n            the form an I will contact you.\n          </p>\n          <p style={{ fontWeight: 'bolder', fontStyle: 'italic' }}>\n            Please note that I will only contact you if you correctly identify\n            the Apple AirPods which I found.\n          </p>\n          <button onClick={() => setShowForm(true)}>Begin</button>\n        </Container>\n      ) : (\n        <Form title=\"Claim AirPods\" toggleVisibility={setShowForm} />\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './sass/styles.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}